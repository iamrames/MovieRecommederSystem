set FLASK_APP=flaskr
set FLASK_ENV=development
flask run


flask init-db
flask insert-users
flask insert-movies
flask insert-ratings
flask insert-genre

Notes:
Item based collaborative filtering is considered as more effective solution for recommending similar items.
Three known implementations being used are
Cosine Vector Similarity
Euclidean Distance
Pearson Correlation Coefficient

Pearson correlation and cosine similarity are the most commonly utilized similarity measures to implement collaborative filtering methods. Many factors have an impact on the overall collaborative filtering performance such as the dataset features and the additional info that is used in producing the recommendation. However, in general, the cosine-based collaborative filtering is negatively affected by the sparsity problem and this negative behavior can be reduced by selecting high k-neighbor values. In contrast, the performance of the Pearson-based collaborative filtering is positively affected by the sparsity problem. Note that computing the similarity using Pearson correlation may result in inequitable similarity values. By meaning, in user-based methods, considering two users are similar is inequitable when one of them rated a small number of items and another user rated a large number of items. For instance, consider the case in which user A rated 20 items, user B rated 150 items and both users gave those 20 items the same ratings. Then, it is inequitable to say that user A is 100% similar to user B because user A rated 13.4% of the items that are rated by user B. The same problem can arise in item-based collaborative filtering methods.


https://www.statisticshowto.com/probability-and-statistics/correlation-coefficient-formula/